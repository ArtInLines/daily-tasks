// Returns all primes up to and including n
primesUpTo := procedure(n) {
	S := {2..n};
	return S - { p * q : p in S, q in S };
};

factorize := procedure(n, primes := om) {
	if (primes == om) {
		primes := primesUpTo(n);
	}
	factors := {};
	f := fromB(primes);
	while (n > 1) {
		if (n % f == 0) {
			if (f in domain(factors)) {
				factors[f] += 1;
			} else {
				factors[f] := 1;
			}
			n \= f;
		} else {
			assert(primes != {}, "The available primes should never be empty before factorizing is over");
			f := fromB(primes);
		}
	}
	return factors;
};

lcm := procedure(nums) {
	primes := primesUpTo(max(nums));
	factors := {};
	for (n in nums) {
		facts := factorize(n, primes);
		for ([prime, power] in facts) {
			if (prime in domain(factors)) {
				factors[prime] := max({power, factors[prime]});
			} else {
				factors[prime] := power;
			}
		}
	}
	return */ { a ** b : [a, b] in factors };
};

print(lcm([1..20]));